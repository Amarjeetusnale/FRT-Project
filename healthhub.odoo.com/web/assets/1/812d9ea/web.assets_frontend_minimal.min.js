/* /web/static/src/module_loader.js */
(function() {
    "use strict";
    class ModuleLoader {
        factories = new Map();
        jobs = new Set();
        failed = new Set();
        modules = new Map();
        bus = new EventTarget();
        checkErrorProm = null;
        define(name, deps, factory) {
            if (typeof name !== "string") {
                throw new Error(`Invalid name definition: ${name} (should be a string)"`);
            }
            if (!(deps instanceof Array)) {
                throw new Error(`Dependencies should be defined by an array: ${deps}`);
            }
            if (typeof factory !== "function") {
                throw new Error(`Factory should be defined by a function ${factory}`);
            }
            if (!this.factories.has(name)) {
                this.factories.set(name, {
                    deps,
                    fn: factory,
                    ignoreMissingDeps: globalThis.__odooIgnoreMissingDependencies,
                });
                this.addJob(name);
                this.checkErrorProm || = Promise.resolve().then(() => {
                    this.checkAndReportErrors();
                    this.checkErrorProm = null;
                });
            }
        }
        addJob(name) {
            this.jobs.add(name);
            this.startModules();
        }
        findJob() {
            for (const job of this.jobs) {
                if (this.factories.get(job).deps.every((dep) => this.modules.has(dep))) {
                    return job;
                }
            }
            return null;
        }
        startModules() {
            let job;
            while ((job = this.findJob())) {
                this.startModule(job);
            }
        }
        startModule(name) {
            const require = (name) => this.modules.get(name);
            this.jobs.delete(name);
            const factory = this.factories.get(name);
            let value = null;
            try {
                value = factory.fn(require);
            } catch (error) {
                this.failed.add(name);
                throw new Error(`Error while loading "${name}":\n${error}`);
            }
            this.modules.set(name, value);
            this.bus.dispatchEvent(new CustomEvent("module-started", {
                detail: {
                    moduleName: name,
                    module: value
                }
            }));
        }
        findErrors() {
            const dependencyGraph = new Map();
            for (const job of this.jobs) {
                dependencyGraph.set(job, this.factories.get(job).deps);
            }

            function visitJobs(jobs, visited = new Set()) {
                for (const job of jobs) {
                    const result = visitJob(job, visited);
                    if (result) {
                        return result;
                    }
                }
                return null;
            }

            function visitJob(job, visited) {
                if (visited.has(job)) {
                    const jobs = Array.from(visited).concat([job]);
                    const index = jobs.indexOf(job);
                    return jobs.slice(index).map((j) => `"${j}"`).join(" => ");
                }
                const deps = dependencyGraph.get(job);
                return deps ? visitJobs(deps, new Set(visited).add(job)) : null;
            }
            const missing = new Set();
            for (const job of this.jobs) {
                const factory = this.factories.get(job);
                if (factory.ignoreMissingDeps) {
                    continue;
                }
                for (const dep of factory.deps) {
                    if (!this.factories.has(dep)) {
                        missing.add(dep);
                    }
                }
            }
            return {
                failed: [...this.failed],
                cycle: visitJobs(this.jobs),
                missing: [...missing],
                unloaded: [...this.jobs].filter((j) => !this.factories.get(j).ignoreMissingDeps),
            };
        }
        async checkAndReportErrors() {
            const {
                failed,
                cycle,
                missing,
                unloaded
            } = this.findErrors();
            if (!failed.length && !unloaded.length) {
                return;
            }

            function domReady(cb) {
                if (document.readyState === "complete") {
                    cb();
                } else {
                    document.addEventListener("DOMContentLoaded", cb);
                }
            }

            function list(heading, names) {
                const frag = document.createDocumentFragment();
                if (!names || !names.length) {
                    return frag;
                }
                frag.textContent = heading;
                const ul = document.createElement("ul");
                for (const el of names) {
                    const li = document.createElement("li");
                    li.textContent = el;
                    ul.append(li);
                }
                frag.appendChild(ul);
                return frag;
            }
            domReady(() => {
                while (document.body.childNodes.length) {
                    document.body.childNodes[0].remove();
                }
                const container = document.createElement("div");
                container.className = "o_module_error position-fixed w-100 h-100 d-flex align-items-center flex-column bg-white overflow-auto modal";
                container.style.zIndex = "10000";
                const alert = document.createElement("div");
                alert.className = "alert alert-danger o_error_detail fw-bold m-auto";
                container.appendChild(alert);
                alert.appendChild(list("The following modules failed to load because of an error, you may find more information in the devtools console:", failed));
                alert.appendChild(list("The following modules could not be loaded because they form a dependency cycle:", cycle && [cycle]));
                alert.appendChild(list("The following modules are needed by other modules but have not been defined, they may not be present in the correct asset bundle:", missing));
                alert.appendChild(list("The following modules could not be loaded because they have unmet dependencies, this is a secondary error which is likely caused by one of the above problems:", unloaded));
                document.body.appendChild(container);
            });
        }
    }
    if (!globalThis.odoo) {
        globalThis.odoo = {};
    }
    const odoo = globalThis.odoo;
    if (odoo.debug && !new URLSearchParams(location.search).has("debug")) {
        odoo.debug = "";
    }
    const loader = new ModuleLoader();
    odoo.define = loader.define.bind(loader);
    odoo.loader = loader;
})();;

/* /web/static/src/session.js */
odoo.define('@web/session', [], function(require) {
    'use strict';
    let __exports = {};
    const session = __exports.session = odoo.__session_info__ || {};
    delete odoo.__session_info__;
    return __exports;
});;

/* /web/static/src/core/browser/cookie.js */
odoo.define('@web/core/browser/cookie', [], function(require) {
    'use strict';
    let __exports = {};
    const COOKIE_TTL = 24 * 60 * 60 * 365;
    const cookie = __exports.cookie = {
        get _cookieMonster() {
            return document.cookie;
        },
        set _cookieMonster(value) {
            document.cookie = value;
        },
        get(str) {
            const parts = this._cookieMonster.split("; ");
            for (const part of parts) {
                const [key, value] = part.split(/=(.*)/);
                if (key === str) {
                    return value || "";
                }
            }
        },
        set(key, value, ttl = COOKIE_TTL) {
            let fullCookie = [];
            if (value !== undefined) {
                fullCookie.push(`${key}=${value}`);
            }
            fullCookie = fullCookie.concat(["path=/", `max-age=${ttl}`]);
            this._cookieMonster = fullCookie.join("; ");
        },
        delete(key) {
            this.set(key, "kill", 0);
        },
    };
    return __exports;
});;

/* /web/static/src/legacy/js/public/lazyloader.js */
odoo.define('@web/legacy/js/public/lazyloader', [], function(require) {
    'use strict';
    let __exports = {};
    var blockEvents = ['submit', 'click'];
    var blockFunction = function(ev) {
        ev.preventDefault();
        ev.stopImmediatePropagation();
    };
    var waitingLazy = false;

    function waitLazy() {
        if (waitingLazy) {
            return;
        }
        waitingLazy = true;
        var lazyEls = document.querySelectorAll('.o_wait_lazy_js');
        for (var i = 0; i < lazyEls.length; i++) {
            var element = lazyEls[i];
            blockEvents.forEach(function(evType) {
                element.addEventListener(evType, blockFunction);
            });
        }
        document.body.classList.add('o_lazy_js_waiting');
    }

    function stopWaitingLazy() {
        if (!waitingLazy) {
            return;
        }
        waitingLazy = false;
        var lazyEls = document.querySelectorAll('.o_wait_lazy_js');
        for (var i = 0; i < lazyEls.length; i++) {
            var element = lazyEls[i];
            blockEvents.forEach(function(evType) {
                element.removeEventListener(evType, blockFunction);
            });
            element.classList.remove('o_wait_lazy_js');
        }
        document.body.classList.remove('o_lazy_js_waiting');
    }
    if (document.readyState !== 'loading') {
        waitLazy();
    } else {
        document.addEventListener('DOMContentLoaded', function() {
            waitLazy();
        });
    }
    var doResolve = null;
    var _allScriptsLoaded = new Promise(function(resolve) {
        if (doResolve) {
            resolve();
        } else {
            doResolve = resolve;
        }
    }).then(function() {
        stopWaitingLazy();
    });
    if (document.readyState === 'complete') {
        setTimeout(_loadScripts, 0);
    } else {
        window.addEventListener('load', function() {
            setTimeout(_loadScripts, 0);
        });
    }

    function _loadScripts(scripts, index) {
        if (scripts === undefined) {
            scripts = document.querySelectorAll('script[data-src]');
        }
        if (index === undefined) {
            index = 0;
        }
        if (index >= scripts.length) {
            if (typeof doResolve === 'function') {
                doResolve();
            } else {
                doResolve = true;
            }
            return;
        }
        var script = scripts[index];
        script.addEventListener('load', _loadScripts.bind(this, scripts, index + 1));
        script.setAttribute('defer', 'defer');
        script.src = script.dataset.src;
        script.removeAttribute('data-src');
    }
    __exports[Symbol.for("default")] = {
        loadScripts: _loadScripts,
        allScriptsLoaded: _allScriptsLoaded,
    };
    return __exports;
});;

/* /web_editor/static/src/js/frontend/loader_loading.js */
(function() {
    'use strict';
    document.addEventListener('DOMContentLoaded', () => {
        var textareaEls = document.querySelectorAll('textarea.o_wysiwyg_loader');
        for (var i = 0; i < textareaEls.length; i++) {
            var textarea = textareaEls[i];
            var wrapper = document.createElement('div');
            wrapper.classList.add('position-relative', 'o_wysiwyg_textarea_wrapper');
            var loadingElement = document.createElement('div');
            loadingElement.classList.add('o_wysiwyg_loading');
            var loadingIcon = document.createElement('i');
            loadingIcon.classList.add('text-600', 'text-center', 'fa', 'fa-circle-o-notch', 'fa-spin', 'fa-2x');
            loadingElement.appendChild(loadingIcon);
            wrapper.appendChild(loadingElement);
            textarea.parentNode.insertBefore(wrapper, textarea);
            wrapper.insertBefore(textarea, loadingElement);
        }
    });
})();;

/* /website/static/src/js/content/inject_dom.js */
odoo.define('@website/js/content/inject_dom', ['@web/core/browser/cookie', '@web/session'], function(require) {
    'use strict';
    let __exports = {};
    const {
        cookie: cookieManager
    } = require("@web/core/browser/cookie");
    const {
        session
    } = require("@web/session");
    __exports.unhideConditionalElements = unhideConditionalElements;

    function unhideConditionalElements() {
        const styleEl = document.createElement('style');
        styleEl.id = "conditional_visibility";
        document.head.appendChild(styleEl);
        const conditionalEls = document.querySelectorAll('[data-visibility="conditional"]');
        for (const conditionalEl of conditionalEls) {
            const selectors = conditionalEl.dataset.visibilitySelectors;
            styleEl.sheet.insertRule(`${selectors} { display: none !important; }`);
        }
        for (const conditionalEl of conditionalEls) {
            conditionalEl.classList.remove('o_conditional_hidden');
        }
    }
    document.addEventListener('DOMContentLoaded', () => {
        const htmlEl = document.documentElement;
        const cookieNamesToDataNames = {
            'utm_source': 'utmSource',
            'utm_medium': 'utmMedium',
            'utm_campaign': 'utmCampaign',
        };
        for (const [name, dsName] of Object.entries(cookieNamesToDataNames)) {
            const cookie = cookieManager.get(`odoo_${name}`);
            if (cookie) {
                htmlEl.dataset[dsName] = cookie.replace(/(^["']|["']$)/g, '');
            }
        }
        const country = session.geoip_country_code;
        if (country) {
            htmlEl.dataset.country = country;
        }
        htmlEl.dataset.logged = !session.is_website_user;
        unhideConditionalElements();
    });
    return __exports;
});;

/* /website/static/src/js/content/auto_hide_menu.js */
odoo.define('@website/js/content/auto_hide_menu', [], function(require) {
    'use strict';
    let __exports = {};
    const BREAKPOINT_SIZES = {
        sm: '575',
        md: '767',
        lg: '991',
        xl: '1199',
        xxl: '1399'
    };
    async function autoHideMenu(el, options) {
        if (!el) {
            return;
        }
        const navbar = el.closest('.navbar');
        const [breakpoint = 'md'] = navbar ? Object.keys(BREAKPOINT_SIZES).filter(suffix => navbar.classList.contains(`navbar-expand-${suffix}`)) : [];
        const isNoHamburgerMenu = !!navbar && navbar.classList.contains('navbar-expand');
        const minSize = BREAKPOINT_SIZES[breakpoint];
        let isExtraMenuOpen = false;
        options = Object.assign({
            unfoldable: 'none',
            images: [],
            loadingStyleClasses: [],
            autoClose: () => true,
        }, options || {});
        const isUserNavbar = el.parentElement.classList.contains('o_main_navbar');
        const dropdownSubMenuClasses = ['show', 'border-0', 'position-static'];
        const dropdownToggleClasses = ['h-auto', 'py-2', 'text-secondary'];
        const autoMarginLeftRegex = /\bm[sx]?(?:-(?:sm|md|lg|xl|xxl))?-auto\b/;
        const autoMarginRightRegex = /\bm[ex]?(?:-(?:sm|md|lg|xl|xxl))?-auto\b/;
        var extraItemsToggle = null;
        const afterFontsloading = new Promise((resolve) => {
            if (document.fonts) {
                document.fonts.ready.then(resolve);
            } else {
                setTimeout(resolve, 150);
            }
        });
        afterFontsloading.then(_adapt);
        if (options.images.length) {
            await _afterImagesLoading(options.images);
            _adapt();
        }
        let pending = false;
        let refreshId = null;
        const onRefresh = () => {
            if (pending) {
                refreshId = window.requestAnimationFrame(onRefresh);
                _adapt();
                pending = false;
            } else {
                refreshId = null;
            }
        };
        const throttleAdapt = () => {
            if (refreshId === null) {
                refreshId = window.requestAnimationFrame(onRefresh);
                _adapt();
            } else {
                pending = true;
            }
        };
        window.addEventListener('resize', throttleAdapt);

        function _restore() {
            if (!extraItemsToggle) {
                return;
            }
            [...extraItemsToggle.querySelector('.dropdown-menu').children].forEach((item) => {
                if (!isUserNavbar) {
                    item.classList.add('nav-item');
                    const itemLink = item.querySelector('.dropdown-item');
                    if (itemLink) {
                        itemLink.classList.remove('dropdown-item');
                        itemLink.classList.add('nav-link');
                    }
                } else {
                    item.classList.remove('dropdown-item');
                    const dropdownSubMenu = item.querySelector('.dropdown-menu');
                    const dropdownSubMenuButton = item.querySelector('.dropdown-toggle');
                    if (dropdownSubMenu) {
                        dropdownSubMenu.classList.remove(...dropdownSubMenuClasses);
                    }
                    if (dropdownSubMenuButton) {
                        dropdownSubMenuButton.classList.remove(...dropdownToggleClasses);
                    }
                }
                el.insertBefore(item, extraItemsToggle);
            });
            extraItemsToggle.remove();
            extraItemsToggle = null;
        }

        function _adapt() {
            const wysiwyg = window.$ && $('#wrapwrap').data('wysiwyg');
            const odooEditor = wysiwyg && wysiwyg.odooEditor;
            if (odooEditor) {
                odooEditor.observerUnactive("adapt");
                odooEditor.withoutRollback(__adapt);
                odooEditor.observerActive("adapt");
                return;
            }
            __adapt();
        }

        function __adapt() {
            if (options.loadingStyleClasses.length) {
                el.classList.add(...options.loadingStyleClasses);
            }
            const extraMenuEl = _getExtraMenuEl();
            isExtraMenuOpen = extraMenuEl && extraMenuEl.classList.contains("show");
            _restore();
            if (!el.getClientRects().length || el.closest('.show') || (window.matchMedia(`(max-width: ${minSize}px)`).matches && !isNoHamburgerMenu)) {
                return _endAutoMoreMenu();
            }
            let unfoldableItems = [];
            const items = [...el.children].filter((node) => {
                if (node.matches && !node.matches(options.unfoldable)) {
                    return true;
                }
                unfoldableItems.push(node);
                return false;
            });
            var nbItems = items.length;
            var menuItemsWidth = items.reduce((sum, el) => sum + computeFloatOuterWidthWithMargins(el, true, true, false), 0);
            let maxWidth = 0;
            if (!maxWidth) {
                maxWidth = computeFloatOuterWidthWithMargins(el, true, true, true);
                var style = window.getComputedStyle(el);
                maxWidth -= (parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) + parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth));
                maxWidth -= unfoldableItems.reduce((sum, el) => sum + computeFloatOuterWidthWithMargins(el, true, true, false), 0);
            }
            if (maxWidth - menuItemsWidth >= -0.001) {
                return _endAutoMoreMenu();
            }
            const dropdownMenu = _addExtraItemsButton(items[nbItems - 1].nextElementSibling);
            menuItemsWidth += computeFloatOuterWidthWithMargins(extraItemsToggle, true, true, false);
            do {
                menuItemsWidth -= computeFloatOuterWidthWithMargins(items[--nbItems], true, true, false);
            } while (!(maxWidth - menuItemsWidth >= -0.001) && (nbItems > 0));
            const extraItems = items.slice(nbItems);
            extraItems.forEach((el) => {
                if (!isUserNavbar) {
                    const navLink = el.querySelector('.nav-link, a');
                    el.classList.remove('nav-item');
                    if (navLink) {
                        navLink.classList.remove('nav-link');
                        navLink.classList.add('dropdown-item');
                        navLink.classList.toggle('active', el.classList.contains('active'));
                    }
                } else {
                    const dropdownSubMenu = el.querySelector('.dropdown-menu');
                    const dropdownSubMenuButton = el.querySelector('.dropdown-toggle');
                    el.classList.add('dropdown-item', 'p-0');
                    if (dropdownSubMenu) {
                        dropdownSubMenu.classList.add(...dropdownSubMenuClasses);
                    }
                    if (dropdownSubMenuButton) {
                        dropdownSubMenuButton.classList.add(...dropdownToggleClasses);
                    }
                }
                dropdownMenu.appendChild(el);
            });
            _endAutoMoreMenu();
        }

        function computeFloatOuterWidthWithMargins(el, mLeft, mRight, considerAutoMargins) {
            var rect = el.getBoundingClientRect();
            var style = window.getComputedStyle(el);
            var outerWidth = rect.right - rect.left;
            const isRTL = style.direction === 'rtl';
            if (mLeft !== false && (considerAutoMargins || !(isRTL ? autoMarginRightRegex : autoMarginLeftRegex).test(el.getAttribute('class')))) {
                outerWidth += parseFloat(style.marginLeft);
            }
            if (mRight !== false && (considerAutoMargins || !(isRTL ? autoMarginLeftRegex : autoMarginRightRegex).test(el.getAttribute('class')))) {
                outerWidth += parseFloat(style.marginRight);
            }
            return isNaN(outerWidth) ? 0 : outerWidth;
        }

        function _addExtraItemsButton(target) {
            let dropdownMenu = document.createElement('div');
            extraItemsToggle = dropdownMenu.cloneNode();
            const extraItemsToggleIcon = document.createElement('i');
            const extraItemsToggleLink = document.createElement('a');
            dropdownMenu.className = 'dropdown-menu';
            extraItemsToggle.className = 'nav-item dropdown o_extra_menu_items';
            extraItemsToggle.setAttribute("role", "presentation");
            extraItemsToggleIcon.className = 'fa fa-plus';
            const extraItemsToggleAriaLabel = el.closest("[data-extra-items-toggle-aria-label]") ? .dataset.extraItemsToggleAriaLabel;
            Object.entries({
                role: 'menuitem',
                href: '#',
                class: 'nav-link dropdown-toggle o-no-caret',
                'data-bs-toggle': 'dropdown',
                'aria-expanded': false,
                'aria-label': extraItemsToggleAriaLabel || " ",
            }).forEach(([key, value]) => {
                extraItemsToggleLink.setAttribute(key, value);
            });
            extraItemsToggleLink.appendChild(extraItemsToggleIcon);
            extraItemsToggle.appendChild(extraItemsToggleLink);
            extraItemsToggle.appendChild(dropdownMenu);
            el.insertBefore(extraItemsToggle, target);
            if (!options.autoClose()) {
                extraItemsToggleLink.setAttribute("data-bs-auto-close", "outside");
            }
            return dropdownMenu;
        }

        function _afterImagesLoading(images) {
            const defs = images.map((image) => {
                if (image.complete || !image.getClientRects().length) {
                    return null;
                }
                return new Promise(function(resolve, reject) {
                    if (!image.width) {
                        image.classList.add('o_menu_image_placeholder');
                    }
                    image.addEventListener('load', () => {
                        image.classList.remove('o_menu_image_placeholder');
                        resolve();
                    });
                });
            });
            return Promise.all(defs);
        }

        function _getExtraMenuEl() {
            return el.querySelector(".o_extra_menu_items .dropdown-toggle");
        }

        function _endAutoMoreMenu() {
            const extraMenuEl = _getExtraMenuEl();
            if (extraMenuEl && isExtraMenuOpen) {
                extraMenuEl.click();
            }
            el.classList.remove(...options.loadingStyleClasses);
        }
    }
    document.addEventListener('DOMContentLoaded', async () => {
        const header = document.querySelector('header#top');
        if (header) {
            const topMenu = header.querySelector("#top_menu, .top_menu");
            if (header.classList.contains('o_no_autohide_menu')) {
                topMenu.classList.remove('o_menu_loading');
                return;
            }
            const unfoldable = '.divider, .divider ~ li, .o_no_autohide_item, .js_language_selector';
            const excludedImagesSelector = '.o_mega_menu, .o_offcanvas_logo_container, .o_lang_flag';
            const excludedImages = [...header.querySelectorAll(excludedImagesSelector)];
            const images = [...header.querySelectorAll('img')].filter((img) => {
                excludedImages.forEach(node => {
                    if (node.contains(img)) {
                        return false;
                    }
                });
                return img.matches && !img.matches(excludedImagesSelector);
            });
            autoHideMenu(topMenu, {
                unfoldable: unfoldable,
                images: images,
                loadingStyleClasses: ['o_menu_loading'],
                autoClose: () => !document.body.classList.contains("editor_enable"),
            });
        }
    });
    return __exports;
});;

/* /website/static/src/js/content/redirect.js */
odoo.define('@website/js/content/redirect', ['@web/session'], function(require) {
    'use strict';
    let __exports = {};
    const {
        session
    } = require('@web/session');
    document.addEventListener('DOMContentLoaded', () => {
        if (session.is_website_user) {
            return;
        }
        if (!window.frameElement) {
            const frontendToBackendNavEl = document.querySelector('.o_frontend_to_backend_nav');
            if (frontendToBackendNavEl) {
                frontendToBackendNavEl.classList.add('d-flex');
                frontendToBackendNavEl.classList.remove('d-none');
            }
            const currentUrl = new URL(window.location.href);
            currentUrl.pathname = `/@${currentUrl.pathname}`;
            if (currentUrl.searchParams.get('enable_editor') || currentUrl.searchParams.get('edit_translations')) {
                document.body.innerHTML = '';
                window.location.replace(currentUrl.href);
                return;
            }
            const backendEditBtnEl = document.querySelector('.o_frontend_to_backend_edit_btn');
            if (backendEditBtnEl) {
                backendEditBtnEl.href = currentUrl.href;
                document.addEventListener("keydown", ev => {
                    if (ev.key === "a" && ev.altKey) {
                        currentUrl.searchParams.set('enable_editor', 1);
                        window.location.replace(currentUrl.href);
                    }
                }, true);
            }
        } else {
            const backendUserDropdownLinkEl = document.getElementById('o_backend_user_dropdown_link');
            if (backendUserDropdownLinkEl) {
                backendUserDropdownLinkEl.classList.add('d-none');
                backendUserDropdownLinkEl.classList.remove('d-flex');
            }
            window.frameElement.dispatchEvent(new CustomEvent('OdooFrameContentLoaded'));
        }
    });
    return __exports;
});;

/* /website/static/src/js/content/adapt_content.js */
odoo.define('@website/js/content/adapt_content', [], function(require) {
    'use strict';
    let __exports = {};
    document.addEventListener('DOMContentLoaded', () => {
        const htmlEl = document.documentElement;
        const editTranslations = !!htmlEl.dataset.edit_translations;
        if (editTranslations) {
            [...document.querySelectorAll('textarea')].map(textarea => {
                if (textarea.value.indexOf('data-oe-translation-initial-sha') !== -1) {
                    textarea.classList.add('o_text_content_invisible');
                }
            });
        }
        const searchModalEl = document.querySelector("header#top .modal#o_search_modal");
        if (searchModalEl) {
            document.querySelector("#o_shared_blocks").appendChild(searchModalEl);
        }
    });
    return __exports;
});